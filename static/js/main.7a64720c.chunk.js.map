{"version":3,"sources":["Members/Members.js","App.js","Home/team_chaos.png","Home/Home.js","reportWebVitals.js","index.js"],"names":["Members","useState","memberData","setMemberData","useEffect","fetchMemberData","memberJson","getRankTierMedal","rankTier","leaderboardRank","medalElement","imgDescription","parseInt","intRankTier","rank","rankTierToString","iconPath","window","location","origin","className","data-hint","data-hint-position","width","height","src","alt","star","starPath","Math","floor","data","promises","map","x","fetch","account_id","then","response","json","Promise","all","results","gutter","xs","sm","md","lg","span","orientation","index","profile","personaname","name","avatar","rank_tier","leaderboard_rank","App","Home","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a64720c.chunk.js","sourcesContent":["// import './App.css';\r\nimport { useEffect, useState } from \"react\";\r\nimport memberJson from \"./members_data.json\";\r\nimport 'antd/dist/antd.css';\r\nimport { Row, Col, Divider } from 'antd';\r\nimport './Members.css';\r\n\r\nfunction Members() {\r\n  const [memberData, setMemberData] = useState([]);\r\n  useEffect(() => {\r\n    fetchMemberData(memberJson);\r\n  }, [memberJson]);\r\n\r\n  function rankTierToString(rankTier) {\r\n    // const { strings } = store.getState().app;\r\n    if (rankTier !== parseInt(rankTier, 10)) {\r\n      // return strings.general_unknown;\r\n      return \"strings.general_unknown\";\r\n    }\r\n    const intRankTier = parseInt(rankTier, 10);\r\n    // let rank = strings[`rank_tier_${parseInt(intRankTier / 10, 10)}`];\r\n    let rank = `rank_tier_${parseInt(intRankTier / 10, 10)}`;\r\n\r\n    if (intRankTier > 9 && intRankTier !== 80) {\r\n      rank += ` [${parseInt(intRankTier % 10, 10)}]`;\r\n    }\r\n    return rank;\r\n  }\r\n\r\n  const getRankTierMedal = (rankTier, leaderboardRank) => {\r\n    let medalElement = null;\r\n    const imgDescription = rankTierToString(rankTier);\r\n    if (rankTier) {\r\n      // if the players ranktier is 0 they are uncalibrated\r\n      let iconPath;\r\n\r\n      if (leaderboardRank) {\r\n        // if the player is on leaderboard ie. immortal\r\n        if (leaderboardRank <= 10) {\r\n          // top 10 and top 100 positions have different icons\r\n          iconPath =\r\n            `${window.location.origin}/team-chaos-website/assets/images/dota2/rank_icons/rank_icon_8c.png`;\r\n        } else if (leaderboardRank <= 100) {\r\n          iconPath =\r\n            `${window.location.origin}/team-chaos-website/assets/images/dota2/rank_icons/rank_icon_8b.png`;\r\n        } else {\r\n          iconPath =\r\n            `${window.location.origin}/team-chaos-website/assets/images/dota2/rank_icons/rank_icon_8.png`;\r\n        }\r\n        medalElement = (\r\n          <div className=\"rankTierContainer\">\r\n            <div\r\n              className=\"rankMedal\"\r\n              data-hint={imgDescription}\r\n              data-hint-position=\"top\"\r\n            >\r\n              <img className=\"rankMedal-icon\" width='50' height='50' src={iconPath} alt=\"icon\" />\r\n              {leaderboardRank && (\r\n                <span className=\"rankMedal-board\">{leaderboardRank}</span>\r\n              )}\r\n            </div>\r\n          </div>\r\n        );\r\n      } else {\r\n        // everyone who isn't immortal has an icon and some number of stars\r\n        const intRankTier = parseInt(rankTier, 10);\r\n        let star = intRankTier % 10;\r\n\r\n        if (star < 1) {\r\n          // I'm not sure if ranktier can give a number outside this range but better safe than sorry\r\n          star = 1;\r\n        } else if (star > 7) {\r\n          star = 7;\r\n        }\r\n\r\n        const starPath = `${window.location.origin}/team-chaos-website/assets/images/dota2/rank_icons/rank_star_${star}.png`;\r\n        iconPath = `${window.location.origin}/team-chaos-website/assets/images/dota2/rank_icons/rank_icon_${Math.floor(\r\n          intRankTier / 10\r\n        )}.png`;\r\n        medalElement = (\r\n          <div className=\"rankTierContainer\">\r\n            <div\r\n              className=\"rankMedal\"\r\n              data-hint={imgDescription}\r\n              data-hint-position=\"top\"\r\n            >\r\n              <img className=\"rankMedal-icon\" src={iconPath} alt=\"icon\" />\r\n              {star !== 0 ? (\r\n                <img className=\"rankMedal-star\" src={starPath} alt=\"star\" />\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              {/* {leaderboardRank && (\r\n                <span className=\"rankMedal-board\">{leaderboardRank}</span>\r\n              )} */}\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    } else {\r\n      // uncalibrated players\r\n      const iconPath =\r\n        `${window.location.origin}/team-chaos-website/assets/images/dota2/rank_icons/rank_icon_0.png`;\r\n      medalElement = (\r\n        <div className=\"rankTierContainer\">\r\n          <div\r\n            className=\"rankMedal\"\r\n            data-hint={imgDescription}\r\n            data-hint-position=\"top\"\r\n          >\r\n            <img className=\"rankMedal-icon\" src={iconPath} alt=\"icon\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return medalElement;\r\n  };\r\n\r\n  const fetchMemberData = (data) => {\r\n    const promises = data.map((x) => {\r\n      return fetch(`https://api.opendota.com/api/players/${x.account_id}`).then(\r\n        (response) => {\r\n          return response.json();\r\n        }\r\n      );\r\n    });\r\n    Promise.all(promises).then((results) => {\r\n      setMemberData(results);\r\n    });\r\n  };\r\n  return (\r\n  < div className='member-container'>\r\n  <div className='header'>\r\n    <span className='name'>CHAOS</span>\r\n  </div>\r\n  <div className=\"title\">Members</div>\r\n  <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n      <Col  span={6}>\r\n        <div className='col-title'>Name</div>\r\n      </Col>\r\n      <Col  span={6}>\r\n        <div className='col-title'>Real Name</div>\r\n      </Col>\r\n      <Col  span={6}>\r\n        <div className='col-title'>Image</div>\r\n      </Col>\r\n      <Col span={6}>\r\n        <div className='col-title'>Rank</div>\r\n      </Col>\r\n      </Row>\r\n      <Divider orientation=\"left\"></Divider>\r\n           {memberData.map((x, index) => (\r\n             <>\r\n            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n              <Col className='col-title' span={6}>\r\n                {x && x.profile && x.profile.personaname\r\n                  ? x.profile.personaname\r\n                  : \"Please share data\"}\r\n              </Col>\r\n              <Col className='col-title' span={6}>{memberJson[index].name}</Col>\r\n              <Col className='col-title' span={6}>\r\n                <img\r\n                width=\"50\"\r\n                height=\"50\"\r\n                  src={\r\n                    x && x.profile && x.profile.avatar ? x.profile.avatar : null\r\n                  }\r\n                />\r\n              </Col>\r\n              <Col className='col-title' span={6}>\r\n                {getRankTierMedal(\r\n                  x && x.rank_tier ? x.rank_tier : 0,\r\n                  x && x.leaderboard_rank ? x.leaderboard_rank : 0\r\n                )}\r\n              </Col>\r\n            </Row>\r\n            <Divider orientation=\"left\"></Divider>\r\n            </>\r\n          ))}\r\n    \r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Members;\r\n","import './App.css';\r\nimport Members from './Members/Members';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='container'>\r\n      <Members/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export default __webpack_public_path__ + \"static/media/team_chaos.2f95b887.png\";","import './Home.css';\r\nimport team_chaos from './team_chaos.png';\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"logo\">\r\n      <img src={team_chaos} alt=\"this is car image\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport Home from './Home/Home'\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <Home /> */}\r\n    <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}